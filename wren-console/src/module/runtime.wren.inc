// Please do not edit this file. It has been generated automatically
// from `src/module/runtime.wren` using `util/wren_to_c_string.py`

static const char* runtimeModuleSource =
"class Capability {\n"
"  construct new(name) {\n"
"    _name = name\n"
"    _version = 0\n"
"  }\n"
"  name { _name }\n"
"  ==(x) { x == _name }\n"
"  toString { _name }\n"
"}\n"
"\n"
"class Runtime {\n"
"  static NAME { \"wren-console\" }\n"
"  static WREN_VERSION { \"0.4.0\" }\n"
"  static VERSION { \"0.3.1\" }\n"
"  // allows simple numeric comparison of semantic version strings\n"
"  // by turning them into large integers\n"
"  static versionToNumber_(v) {\n"
"    var segments = v.split(\".\").map { |x| Num.fromString(x) }.toList\n"
"    return segments[0] * 1000000 + segments[1] * 10000 + segments[2] * 100\n"
"  }\n"
"  // takes a semantic version string, ex \"3.0.0\" and aborts if the currently running\n"
"  // version of wren-console is less than the version specified\n"
"  //\n"
"  // If we running Wren Console 0.3:\n"
"  //\n"
"  //   Runtime.assertVersion(\"1.0\") // aborts with error about version mismatch\n"
"  //   Runtime.assertVersion(\"0.1\") // ok\n"
"  //   Runtime.assertVersion(\"0.3\") // ok\n"
"  static assertVersion(desiredMinimalVersion) {\n"
"    if (versionToNumber_(Runtime.VERSION) < versionToNumber_(desiredMinimalVersion)) {\n"
"      Fiber.abort(\"wren-console version %(desiredMinimalVersion) or higher required.\")\n"
"    }\n"
"  }\n"
"  static capabilities {\n"
"    return [\n"
"      Capability.new(\"essentials\"),\n"
"      Capability.new(\"json\"),\n"
"      Capability.new(\"ensure\"),\n"
"      Capability.new(\"mirror\")\n"
"    ]\n"
"  }\n"
"  static hasCapability(c) { capabilities.any { |item| item.name == c } }\n"
"  static details {\n"
"    return {\n"
"      \"name\": Runtime.NAME,\n"
"      \"wrenVersion\": Runtime.WREN_VERSION,\n"
"      \"version\": Runtime.VERSION,\n"
"      \"capabilities\": capabilities\n"
"    }\n"
"  }\n"
"}\n"
"\n";
