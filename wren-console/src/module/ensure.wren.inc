// Please do not edit this file. It has been generated automatically
// from `src/module/ensure.wren` using `util/wren_to_c_string.py`

static const char* ensureModuleSource =
"class Error {\n"
"  toString { message }\n"
"  raise() { Fiber.abort(this) }\n"
"}\n"
"\n"
"class ArgumentError is Error {\n"
"  construct new(message) {\n"
"    _message = message\n"
"  }\n"
"  message { _message }\n"
"}\n"
"\n"
"class Ensure {\n"
"  static argumentError(msg) { ArgumentError.new(msg).raise() }\n"
"\n"
"  // simple type assertions\n"
"  static map(v, name) { type(v, Map, name ) }\n"
"  static list(v, name) { type(v, List, name ) }\n"
"  static num(v, name) { type(v, Num, name) }\n"
"  static string(v, name) { type(v, String, name) }\n"
"  static bool(v, name) { type(v, bool, name) }\n"
"\n"
"  static int(v, name) {\n"
"    if (!(v is Num) || !v.isInteger) argumentError(\"Expected integer (Num) argument for '%(name)'\")\n"
"  }\n"
"\n"
"  static positiveNum(v, name) {\n"
"    if (!(v is Num) || v < 0) argumentError(\"Expected positive 'Num' argument for '%(name)'\")\n"
"  }\n"
"\n"
"  static positiveInt(v, name) {\n"
"    if (!(v is Num) || !v.isInteger || v < 0) argumentError(\"Expected positive integer (Num) argument for '%(name)'\")\n"
"  }\n"
"\n"
"  static fn(v, arity, name) {\n"
"    if (!(v is Fn) || v.arity != arity) argumentError(\"Expected 'Fn' with %(arity) parameters argument for '%(name)'\")\n"
"  }\n"
"\n"
"  static type(v, type, name) {\n"
"    if (!(v is type)) argumentError(\"Expected '%(type)' argument for '%(name)'\")\n"
"  }\n"
"\n"
"}\n";
